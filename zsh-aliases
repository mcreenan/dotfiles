# vim:ft=sh

# Pytest
alias pt='DATABASE_ENDPOINT=localhost DATABASE_PORT=5442 pipenv run pytest'

# WSL2 Open file in explorer
export WINDOWS_BROWSER='/mnt/c/Windows/explorer.exe'
alias open="$BROWSER"

alias tm='tmuxinator'

alias dc='docker compose'

# QR code in terminal
alias qr='qrencode -t ansiutf8'

# Okta-awscli command
alias okta-awscli='docker run -it --rm -v ~/.aws:/root/.aws -v ~/.okta-aws:/root/.okta-aws okta-awscli'

# EDC
alias locations='vim ~/Projects/dn-edc-configurations/locations.js'

# virtualenv / python
alias venv='source venv/bin/activate'
alias py='PYTHONPATH=. venv/bin/python'

# git
alias gup='cd $(git rev-parse --show-toplevel)'
#alias vim='/usr/local/bin/vim'

# Re-aliasing of system commands
alias ls='ls -G'
alias tree='tree -C'
alias ll='ls -ahlbG'
alias less='less -x4 -R -N -F'
alias grep='grep --color'
alias cgrep='grep --color --exclude-dir node_modules --exclude-dir dist'
alias fd='fdfind'
#alias cat='bat'
alias du='ncdu --color dark -rr -x --exclude .git --exclude node_modules'

alias fs="foreman start -f Procfile.debug"
alias fr="foreman run bundle exec"

function update-perl6 {
	rm -fr ~/.zef;
	rm -fr ~/.perl6;
	rm -fr ~/.rakudobrew/;
	git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew;
	rakudobrew build moar;
	rakudobrew build zef;
}

function aws3du(){
  bucket=`cut -d/ -f3 <<< $1`
  prefix=`awk -F/ '{for (i=4; i<NF; i++) printf $i"/"; print $NF}' <<< $1`
  aws s3api \
    list-objects \
    --bucket $bucket \
    --prefix=$prefix \
    --output text \
    --query '[sum(Contents[].Size), length(Contents[])]' \
    | while read -r size num_objects; do
      jq '. |{ size:.[0],num_objects: .[1]}' <<< "[\"$(/usr/local/opt/coreutils/libexec/gnubin/numfmt --to=si ${size})\",${num_objects}]"
     done
}

# AWS SSH function
awsssh() {
	OUTPUT="$(python ~/scripts/get-ssh-connection.py $@)"
	if [ $? -eq 0 ]; then
		LINE_COUNT="$(echo "$OUTPUT" | wc -l)"
		if [ $LINE_COUNT -eq 1 ]; then
			echo "SSHing to server with $OUTPUT"
			/usr/bin/ssh $(echo ${OUTPUT})
		else
			echo "$OUTPUT"
			echo
			echo "Rerun command with the # as the last argument"
		fi
	else
		echo $OUTPUT
	fi
}

# AWS SSH function using ip address
awssshi() {
	OUTPUT="$(python ~/scripts/get-ssh-connection-ip.py $@)"
	if [ $? -eq 0 ]; then
		LINE_COUNT="$(echo "$OUTPUT" | wc -l)"
		if [ $LINE_COUNT -eq 1 ]; then
			echo "SSHing to server with $OUTPUT"
			/usr/bin/ssh $(echo ${OUTPUT})
		else
			echo "$OUTPUT"
			echo
			echo "Rerun command with the # as the last argument"
		fi
	else
		echo $OUTPUT
	fi
}

function git-find-file-verbose {
	for branch in $(git rev-list --all)
	do
	  git ls-tree -r --name-only $branch | grep "$1" | sed 's/^/'$branch': /'
	done
}
